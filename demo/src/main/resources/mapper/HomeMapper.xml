<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.collavore.app.mapper.HomeMapper">
	<select id="selectBoardList" resultType="HomeVO">
		SELECT board_no
			, name
		FROM bodscfig
		WHERE read_auth >= #{userGrade}
		ORDER BY board_no
	</select>
	
	<select id="selectNoticeList" resultType="HomeVO">
		SELECT * FROM (
		    SELECT 
		        b.post_no,
		        b.title,
		        b.content,
		        (SELECT name FROM employees WHERE emp_no = b.writer) AS empName,
		        (SELECT img FROM employees WHERE emp_no = b.writer) AS profileImg,
		        b.reg_date
		    FROM 
		        bods b
		    WHERE 
		        b.board_no = 1
		    ORDER BY 
		        b.reg_date DESC
		) 
		<![CDATA[
			WHERE ROWNUM <= 5
		]]>
	</select>
	
	<select id="selectAppList" parameterType="int" resultType="HomeVO">
		SELECT * FROM (
		    SELECT 
		        ea_no,
		        title AS appTitle,
		        status AS appStatus,
		        reg_date AS appDate
		    FROM 
		        approvals
		    WHERE 
		        emp_no = #{empNo}
		    ORDER BY 
		        reg_date ASC
		) 
		<![CDATA[
			WHERE ROWNUM <= 5
		]]>
	</select>
    
    <select id="selectEmpList" resultType="HomeVO">
		SELECT
			p.posi_no
			, e.name AS empName
			, p.name AS posiName
			, e.emp_no
			, d.name AS deptName
		FROM employees e 
			JOIN positions p ON e.posi_no = p.posi_no
			JOIN departments d ON e.dept_no = d.dept_no
		ORDER by p.posi_no
    </select>
    
    <select id="selectDeptList" resultType="HomeVO">
		SELECT dept_no
			, name AS deptName
		FROM departments
		WHERE parent_dept_no > 0
    </select>
    
    
    <select id="empAuthList" resultType="HomeVO">
		SELECT
			p.posi_no
			, e.name AS empName
			, p.name AS posiName
			, e.emp_no
			, d.name AS deptName
		FROM employees e 
			JOIN positions p ON e.posi_no = p.posi_no
			JOIN departments d ON e.dept_no = d.dept_no
		WHERE e.emp_no NOT IN (SELECT ma.emp_no FROM menusauth ma JOIN menus m ON ma.menu_no = m.menu_no WHERE m.menu_value = #{menuValue})
			AND d.dept_no = #{deptNo}
		ORDER by p.posi_no
    </select>
	
	<select id="selectAuthEmpList" resultType="HomeVO">
		SELECT auth_no 
			, e.emp_no
		    , e.name AS empName
		    , p.name AS posiName
		    , d.name AS deptName
		FROM menusauth ma
		    JOIN menus m ON ma.menu_no = m.menu_no
		    JOIN employees e ON ma.emp_no = e.emp_no
		    JOIN positions p ON e.posi_no = p.posi_no
		    JOIN departments d ON e.dept_no = d.dept_no
		WHERE m.menu_value = #{menuValue}
	</select>
	
	<select id="selectAuthEmpInfo" resultType="HomeVO">
		SELECT auth_no 
			, ma.emp_no
		    , e.name AS empName
		    , p.name AS posiName
		    , d.name AS deptName
		FROM menusauth ma
		    JOIN menus m ON ma.menu_no = m.menu_no
		    JOIN employees e ON ma.emp_no = e.emp_no
		    JOIN positions p ON e.posi_no = p.posi_no
		    JOIN departments d ON e.dept_no = d.dept_no
		WHERE m.menu_value = #{menuValue}
			AND ma.emp_no = #{empNo}
	</select>
	
	<insert id="insertMenuAuthEmp" parameterType="HomeVO">
		<selectKey keyProperty="menuNo,authNo" resultType="HomeVO"
			order="BEFORE">
				SELECT menu_no
				    , (SELECT COALESCE(MAX(auth_no) + 1, 1) FROM menusauth) AS auth_no
				FROM menus
				WHERE menu_value = #{menuValue}
		</selectKey>
		INSERT INTO menusauth(auth_no, emp_no, menu_no)
		VALUES(#{authNo}, #{empNo}, #{menuNo})
	</insert>
	
	<delete id="deleteMenuAuth" parameterType="int">
		DELETE FROM menusauth
		WHERE auth_no = #{authNo}
	</delete>
	
	<select id="selectTodoList" resultType="HomeVO">
		SELECT * 
		FROM (
			SELECT CASE WHEN content IS NULL THEN name ELSE content END AS todoContent
			    , reg_date AS todoRegDate
			    , importance AS todoImportance
			FROM projdwrks
			WHERE mgr_no = #{empNo}
			<![CDATA[
	    		AND is_status <> 'k4'
			]]>
			ORDER BY reg_date DESC
			) 
		<![CDATA[
			WHERE ROWNUM <= 5
		]]>
	</select>
</mapper>