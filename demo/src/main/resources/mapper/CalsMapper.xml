<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.collavore.app.cals.mapper.SchsMapper">

	
	<select id="selectSchsAll" resultType="SchsVO">
		SELECT
			schs.sch_no AS schNo,
	        schs.title,
	        schs.start_date AS startDate,
	        schs.end_date AS endDate,
	        schs.cal_no AS calNo,
	        cals.name AS calName,
	        cals.cal_type AS calType,
	        schs.is_alarm AS isAlarm,
	        cals.color,
	        LISTAGG(calshares.emp_no, ',') WITHIN GROUP (ORDER BY calshares.emp_no) AS empNos, 
	        LISTAGG(employees.name, ',') WITHIN GROUP (ORDER BY employees.name) AS empNames,  
	        LISTAGG(departments.dept_no, ',') WITHIN GROUP (ORDER BY departments.dept_no) AS deptNos,
	        LISTAGG(departments.name, ',') WITHIN GROUP (ORDER BY departments.name) AS deptNames,
            'N' AS isProj 
		FROM schs
			JOIN cals ON schs.cal_no = cals.cal_no AND cals.is_delete = 'h2'
			LEFT JOIN calshares ON schs.cal_no = calshares.cal_no
			LEFT JOIN employees ON calshares.emp_no = employees.emp_no
			LEFT JOIN departments ON employees.dept_no = departments.dept_no
		WHERE schs.cal_no IN (SELECT cal_no FROM calshares WHERE emp_no = #{empNo})
		GROUP BY schs.sch_no, schs.title, schs.start_date, schs.end_date, schs.cal_no, cals.name, cals.cal_type, schs.is_alarm, cals.color
        UNION ALL
        SELECT pdw.pdw_no AS schNo
            , pdw.name AS title
            , pdw.reg_date AS startDate
            , CASE WHEN pdw.comp_date IS NULL THEN sysdate ELSE pdw.comp_date END AS endDate
            , (SELECT proj_no FROM projwrks WHERE pw_no = pdw.pw_no) AS calNo
            , (SELECT name FROM proj WHERE proj_no = (SELECT proj_no FROM projwrks WHERE pw_no = pdw.pw_no)) as calName
            , 'g3' AS calType
            , 'f2' AS isAlarm
            , 'green' AS color
            , TO_CHAR(pdw.mgr_no) AS empNos
            , (SELECT name FROM employees WHERE emp_no = pdw.mgr_no) AS empNames
            , TO_CHAR((SELECT dept_no FROM employees WHERE emp_no = pdw.mgr_no)) AS deptNos
            , (SELECT name FROM departments WHERE dept_no = (SELECT dept_no FROM employees WHERE emp_no = pdw.mgr_no)) AS deptNames
            , 'Y' AS isProj
        FROM projdwrks pdw
        WHERE pdw.mgr_no = #{empNo}
	</select>
	<!--풀캘린더에서 드롭으로 날짜 시간만 변경하기 -->
	<update id="updateEventTime" parameterType="SchsVO">
     UPDATE schs
	SET	start_date = TO_TIMESTAMP(#{formattedStartDate, jdbcType=VARCHAR}, 'YYYY-MM-DD HH24:MI'),
        end_date = TO_TIMESTAMP(#{formattedEndDate, jdbcType=VARCHAR}, 'YYYY-MM-DD HH24:MI')
    WHERE sch_no = #{schNo}
    </update>
	
	<!-- 단건 일정 조회 -->
	<select id="selectSchsInfo" parameterType="SchsVO"
		resultType="SchsVO">
		SELECT
		s.sch_no,
		s.title,
		s.start_date,
		s.end_date,
		s.is_alarm,
		s.cal_no,
		c.name,
		c.cal_type,
		c.color,
		MAX(a.alarm_type) AS alarm_type,
		MAX(a.alarm_yoil) AS alarm_yoil,
		MAX(a.alarm_day) AS alarm_day,
		MAX(a.alarm_time) AS alarm_time
		FROM schs s
		LEFT JOIN cals c ON s.cal_no
		= c.cal_no
		LEFT JOIN schalarms a ON s.sch_no = a.sch_no
		WHERE s.sch_no =
		#{schNo}
		GROUP BY
		s.sch_no, s.title, s.start_date, s.end_date,
		s.is_alarm, s.cal_no, c.name,
		c.cal_type, c.color
	</select>


	<!-- 일정등록 -->
	<insert id="insertSchsInfo" parameterType="SchsVO">
		<selectKey keyProperty="schNo" resultType="Integer"
			order="BEFORE">
			SELECT NVL(MAX(sch_no), 0) + 1
			FROM schs
		</selectKey>
		INSERT INTO schs (
		sch_no,
		title,
		start_date,
		end_date,
		cal_no,
		is_alarm
		)
		SELECT
		#{schNo},
		#{title},
		#{startDate,jdbcType=TIMESTAMP},
		#{endDate,jdbcType=TIMESTAMP},
		#{calNo},
		#{isAlarm}
		FROM dual
	</insert>
	<!-- 알림여부 f1일시 등록 -->
	<insert id="alarmInsert" parameterType="SchsVO">
		<!-- sa_no에 시퀀스 값을 미리 설정 -->
		<selectKey keyProperty="saNo" resultType="Integer"
			order="BEFORE">
			SELECT NVL(MAX(sa_no), 0) + 1
			FROM schalarms
		</selectKey>

		INSERT INTO schalarms (
		sa_no,
		sch_no,
		alarm_type,
		alarm_yoil,
		alarm_day,
		alarm_time,
		reg_date
		)
		VALUES (
		#{saNo},
		#{schNo},
		#{alarmType},
		#{alarmYoil},
		#{alarmDay},
		#{alarmTime},
		SYSDATE
		)
	</insert>

	<!-- 캘린더 타입에 따른 cal_no 조회 -->



	<select id="selectCalType" resultType="Integer"
		parameterType="int">
		SELECT cal_no
		FROM cals
		WHERE type = #{type} AND is_delete
		= 'h2'
	</select>

	<!--일정삭제 일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭 -->
	<!-- 일정알림관리 조회 -->
	
	<!--일정삭제 일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭일정삭 -->




	<update id="updateSchsInfo" parameterType="SchsVO">
		UPDATE schs
		SET title = #{title},
		    start_date = TO_TIMESTAMP(#{formattedStartDate, jdbcType=VARCHAR}, 'YYYY-MM-DD HH24:MI'),
            end_date = TO_TIMESTAMP(#{formattedEndDate, jdbcType=VARCHAR}, 'YYYY-MM-DD HH24:MI'),
		    cal_no = #{calNo},   <!-- cal_no가 올바르게 설정되었는지 확인 -->
		    is_alarm = #{isAlarm}
		WHERE sch_no = #{schNo}
	</update>

	<update id="updateAlarmInfo" parameterType="SchsVO">
		UPDATE schalarms
		SET
		alarm_type = #{alarmType},
		alarm_yoil = #{alarmYoil},
		alarm_day = #{alarmDay},
		alarm_time = #{alarmTime}
		WHERE sch_no = #{schNo}
	</update>
	<!-- 새 알림 정보 삽입 -->
	<insert id="insertAlarmInfo" parameterType="SchsVO">
		<!-- sa_no에 새로운 값을 설정 -->
		<selectKey keyProperty="saNo" resultType="int"
			order="BEFORE">
			SELECT NVL(MAX(sa_no), 0) + 1 FROM schalarms
		</selectKey>

		INSERT INTO schalarms (
		sa_no,
		sch_no,
		alarm_type,
		alarm_yoil,
		alarm_day,
		alarm_time
		)
		VALUES (
		#{saNo},
		#{schNo},
		#{alarmType},
		#{alarmYoil},
		#{alarmDay},
		#{alarmTime}
		)
	</insert>
	
	<!-- 알림 요일 정보만 업데이트하는 새로운 쿼리 -->
    <update id="updateAlarmYoil" parameterType="SchsVO">
        UPDATE schalarms
        SET alarm_yoil = #{alarmYoil}
        WHERE sch_no = #{schNo}
    </update>

	<!-- 알림 정보 삭제 -->
	<delete id="deleteAlarmInfo" parameterType="int">
		DELETE FROM schalarms
		WHERE sch_no = #{schNo}
	</delete>

	<!-- 특정 sch_no의 알림 존재 여부 확인 -->
	<select id="checkAlarm" parameterType="int" resultType="int">
		SELECT
		COUNT(*) FROM schalarms WHERE sch_no = #{schNo}
	</select>












	<!--==============================END 일정관리 ==================================== -->

	<!--==============================개인 캘린더==================================== -->


	<!-- <select id="selectTeamCal" resultType="SchsVO"> SELECT cs.cal_no, c.name 
		|| ' ' || CASE WHEN c.cal_type = 'g1' THEN '(개인)' WHEN c.cal_type = 'g2' 
		THEN '(공유)' ELSE '프로젝트' END AS name FROM calshares cs INNER JOIN cals c ON 
		c.cal_no = cs.cal_no WHERE cs.emp_no = #{empNo} AND c.cal_type = 'g1' ORDER 
		BY CASE WHEN c.cal_type = 'g1' THEN 1 ELSE 9999 END, c.name </select> -->

	<!-- 캘린더 일정 조회 -->
	<select id="selectAllCal" resultType="SchsVO">
    SELECT cs.cal_no
           , c.name
           , c.color
    FROM
        calshares cs
    INNER JOIN cals c ON c.cal_no = cs.cal_no
    WHERE cs.emp_no = #{empNo}
      		AND c.is_delete = 'h2'
    ORDER BY CASE WHEN
        c.cal_type = 'g1' THEN 1 ELSE
        9999 END, c.name
</select>

	<!-- 공유캘린더 리스트 <select id="selectTeamCal" resultType="SchsVO"> SELECT cs.cal_no, 
		c.name || ' ' || CASE WHEN c.cal_type = 'g1' THEN '(개인)' WHEN c.cal_type 
		= 'g2' THEN '(공유)' ELSE '프로젝트' END AS name FROM calshares cs INNER JOIN cals 
		c ON c.cal_no = cs.cal_no WHERE cs.emp_no = #{empNo} AND c.cal_type = 'g2' 
		ORDER BY c.name </select> -->
	<!-- -->
	<select id="selectTeamCal" resultType="SchsVO">
		SELECT cs.cal_no
		, c.name
		, c.color
		FROM calshares cs
		INNER JOIN cals c
		ON c.cal_no = cs.cal_no
		WHERE
		cs.emp_no = #{empNo}
		AND c.cal_type = 'g2'
		AND c.is_delete = 'h2' 
		ORDER BY c.name
	</select>


	<!-- 캘린더 등록 -->
	<!-- 첫 번째 INSERT: 캘린더 정보 삽입 -->
	<insert id="insertCalsInfo" parameterType="SchsVO">
		<selectKey keyProperty="calNo" resultType="Integer"
			order="BEFORE">
			SELECT NVL(MAX(cal_no), 0) + 1 FROM cals
		</selectKey>
		INSERT INTO cals (
		cal_no
		, name
		, cal_type
		, reg_date
		, is_delete
		, delete_date
		, color
		) VALUES (
		#{calNo}
		, #{name}
		, #{calType}
		, SYSDATE
		, #{isDelete}
		, NULL
		, #{color}
		)
	</insert>

	<!-- 캘린더 공유자 정보 삽입 -->
	<insert id="insertCalShares" parameterType="map">
		<selectKey keyProperty="csNo" resultType="Integer"
			order="BEFORE">
			SELECT NVL(MAX(cs_no), 0) + 1 FROM calshares
		</selectKey>
		INSERT INTO calshares (
		cs_no
		, cal_no
		, emp_no
		, reg_date
		)
		VALUES (
		#{csNo}
		, #{calNo}
		, #{empNo}
		, SYSDATE
		)
	</insert>


	<!-- 캘린더 정보 수정 <update id="updateCalsInfo" parameterType="SchsVO"> UPDATE 
		cals SET name = #{name}, color = #{color} WHERE cal_no = #{calNo} </update> -->
	<!-- 캘린더 기본 정보 업데이트 -->
	<update id="updateCalendarDetails">
		UPDATE cals
		SET name = #{name},
		color = #{color}
		WHERE
		cal_no = #{calNo}
	</update>

	<!-- 기존 참여자 삭제 -->
	<delete id="deleteParticipantsByCalNo">
		DELETE FROM calshares WHERE cal_no = #{calNo}
	</delete>

	<!-- 새 참여자 추가 -->
	<insert id="addParticipant" parameterType="map">
		<selectKey keyProperty="csNo" resultType="Integer"
			order="BEFORE">
			SELECT NVL(MAX(cs_no), 0) + 1 FROM calshares
		</selectKey>
		INSERT INTO calshares (cs_no, cal_no, emp_no, reg_date)
		VALUES
		(#{csNo}, #{calNo}, #{empNo}, SYSDATE)
	</insert>

	<!-- 공유 캘린더의 상세 정보(사원리스트를 가져옴 -->
	<!-- 특정 캘린더의 공유자 목록 조회 -->
	<select id="getCalInfo" resultType="map" parameterType="int">
		SELECT
		cs.emp_no AS empNo,
		e.name AS empName
		FROM
		calshares cs
		JOIN employees e
		ON cs.emp_no = e.emp_no
		WHERE
		cs.cal_no = #{calNo}
	</select>






	<!-- 캘린더를 휴지통으로 이동 (isDelete = 'h1'로 업데이트하고 deleteDate 설정) -->
	<update id="updateCalToTrash" parameterType="int">
		UPDATE cals
		SET
		is_delete = 'h1', delete_date = SYSDATE
		WHERE cal_no = #{calNo}
	</update>


	<!-- 캘린더를 복원 (isDelete = 'h2'로 업데이트하고 deleteDate를 NULL로 설정) -->
	<update id="restoreCalFromTrash" parameterType="int">
		UPDATE cals
		SET
		is_delete = 'h2', delete_date = NULL
		WHERE cal_no = #{calNo}
	</update>




	<!-- 휴지통에 있는 캘린더 조회 -->
	<select id="selectToTrash" resultType="CalsVO">
		SELECT *
		FROM cals
		WHERE
		is_delete = 'h1'
	</select>
	
	<select id="selectprojList" parameterType="int" resultType="CalsVO">
	    SELECT proj_no AS calNo
	        , name
	        , 'g3' AS calType
	        , start_date AS regDate
	        , 'h1' AS isDelete
	        , NULL AS deleteDate
	        , 'green' AS color
	    FROM proj
	    WHERE proj_no IN ( SELECT DISTINCT proj_no FROM projwrks WHERE pw_no IN (SELECT pw_no FROM projdwrks WHERE mgr_no = #{empNo}))
	</select>

	<!-- 캘린더 완전 삭제1 -->
	<delete id="permanentlyDeleteCal" parameterType="int">
		DELETE FROM cals
		WHERE cal_no = #{calNo} AND is_delete = 'h1'  <!-- 휴지통에 있는 
			캘린더만 삭제 -->
	</delete>


	<!-- 캘린더 완전 삭제2 -->
	<!-- 일정관리 조회 -->
	<select id="getSchedulesByCalNo" parameterType="int"
		resultType="int">
		SELECT sch_no FROM schs WHERE cal_no = #{calNo}
	</select>

	<!-- 일정알림관리 조회 -->
	<select id="getAlarmsByScheduleNo" parameterType="int"
		resultType="int">
		SELECT sa_no FROM schalarms WHERE sch_no = #{schNo}
	</select>

	<!-- 일정알림 삭제 -->
	<delete id="deleteAlarm" parameterType="int">
		DELETE FROM schalarms
		WHERE sa_no = #{alarmNo}
	</delete>

	<!-- 일정 삭제 -->
	<delete id="deleteSchedule" parameterType="int">
		DELETE FROM schs WHERE
		sch_no = #{schNo}
	</delete>

	<!-- 캘린더 공유관리 삭제 -->
	<delete id="deleteCalShares" parameterType="int">
		DELETE FROM calshares
		WHERE cal_no = #{calNo}
	</delete>

	<!-- 캘린더 삭제 -->
	<delete id="deleteCalendar" parameterType="int">
		DELETE FROM cals WHERE
		cal_no = #{calNo}
	</delete>
	<!-- end 캘린더 완전 삭제2 -->






	<select id="selectDeptWithEmp" resultType="map">
		SELECT d.dept_no
		,
		d.name AS dept_name
		, e.emp_no
		, e.name AS emp_name
		FROM departments d
		JOIN employees e ON d.dept_no = e.dept_no
		WHERE
		d.dept_no != 1
		ORDER BY
		d.dept_no, e.emp_no
	</select>

	<!-- <select id="selectDeptList" resultType="SchsVO"> SELECT dept_no, name 
		FROM departments WHERE dept_no != 1 </select> 공유캘린더 부서 사원 리스트 가지고오기 <select 
		id="selectDeptEmp" parameterType="int" resultType="Map"> SELECT emp_no, name 
		FROM employees WHERE dept_no = #{deptNo} </select> -->



	<!--==============================END 개인 캘린더 ==================================== -->



	<!-- 새로 등록된 사원에 내캘린더 생성 메 -->
	<update id="insertMyCal" statementType="CALLABLE">
		{call insert_my_cal(
		#{empNo, mode=IN, jdbcType=NUMERIC},
		#{result, mode=OUT,
		jdbcType=NUMERIC}
		)}
	</update>

	<select id="selectCalInfo" resultType="SchsVO">
		SELECT cal_no
		, name
		, color
		FROM cals
		WHERE cal_no = #{calNo}
	</select>

</mapper>