<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.collavore.app.cals.mapper.SchsMapper">

	<select id="selectSchsAll" resultType="SchsVO">
		SELECT
			schs.sch_no,
			schs.title,
			schs.start_date,
			schs.end_date,
			schs.cal_no,
			cals.name AS cal_name, 
			cals.cal_type, 
			schs.is_alarm,
			cals.color, 
			LISTAGG(calshares.emp_no, ',') WITHIN GROUP (ORDER BY calshares.emp_no) AS emp_nos
		FROM schs
			JOIN cals ON schs.cal_no = cals.cal_no AND cals.is_delete = 'h2'
			LEFT JOIN calshares ON schs.cal_no = calshares.cal_no 
		WHERE
			calshares.emp_no = #{empNo}
		GROUP BY
			schs.sch_no, schs.title, schs.start_date, schs.end_date, schs.cal_no, cals.name,
			cals.cal_type, schs.is_alarm, cals.color
			ORDER BY
			schs.sch_no 
	</select>
	<!-- 단건 일정 조회 -->
	<select id="selectSchsInfo" parameterType="SchsVO"
		resultType="SchsVO">
		SELECT
		s.sch_no,
		s.title,
		s.start_date,
		s.end_date,
		s.is_alarm,
		s.cal_no,
		c.name,
		c.cal_type,
		c.color,
		MAX(a.alarm_type) AS alarm_type,
		MAX(a.alarm_yoil) AS alarm_yoil,
		MAX(a.alarm_day) AS alarm_day,
		MAX(a.alarm_time) AS alarm_time
		FROM schs s
		LEFT JOIN cals c ON s.cal_no
		= c.cal_no
		LEFT JOIN schalarms a ON s.sch_no = a.sch_no
		WHERE s.sch_no =
		#{schNo}
		GROUP BY
		s.sch_no, s.title, s.start_date, s.end_date,
		s.is_alarm, s.cal_no, c.name,
		c.cal_type, c.color
	</select>


	<!-- 일정등록 -->
	<insert id="insertSchsInfo" parameterType="SchsVO">
		<selectKey keyProperty="schNo" resultType="Integer"
			order="BEFORE">
			SELECT NVL(MAX(sch_no), 0) + 1
			FROM schs
		</selectKey>
		INSERT INTO schs (
		sch_no,
		title,
		start_date,
		end_date,
		cal_no,
		is_alarm
		)
		SELECT
		#{schNo},
		#{title},
		#{startDate,jdbcType=TIMESTAMP},
		#{endDate,jdbcType=TIMESTAMP},
		#{calNo},
		#{isAlarm}
		FROM dual
	</insert>
	<!-- 알림여부 f1일시 등록 -->
	<insert id="alarmInsert" parameterType="SchsVO">
		<!-- sa_no에 시퀀스 값을 미리 설정 -->
		<selectKey keyProperty="saNo" resultType="Integer"
			order="BEFORE">
			SELECT NVL(MAX(sa_no), 0) + 1
			FROM schalarms
		</selectKey>

		INSERT INTO schalarms (
		sa_no,
		sch_no,
		alarm_type,
		alarm_yoil,
		alarm_day,
		alarm_time,
		reg_date
		)
		VALUES (
		#{saNo},
		#{schNo},
		#{alarmType},
		#{alarmYoil},
		#{alarmDay},
		#{alarmTime},
		SYSDATE
		)
	</insert>

	<!-- 캘린더 타입에 따른 cal_no 조회 -->



	<select id="selectCalType" resultType="Integer"
		parameterType="int">
		SELECT cal_no
		FROM cals
		WHERE type = #{type} AND is_delete
		= 'h2'
	</select>


	<delete id="deleteSchsInfo" parameterType="int">
		DELETE FROM schs
		WHERE
		sch_no = #{schNo}
	</delete>

	<update id="updateSchsInfo" parameterType="SchsVO">
		UPDATE schs
		SET title = #{title},
		start_date = #{startDate},
		end_date =
		#{endDate},
		cal_no = #{calNo},   <!-- cal_no가 올바르게 설정되었는지 확인 -->
		is_alarm = #{isAlarm}
		WHERE sch_no = #{schNo}
	</update>

	<update id="updateAlarmInfo" parameterType="SchsVO">
		UPDATE schalarms
		SET
		alarm_type = #{alarmType},
		alarm_yoil = #{alarmYoil},
		alarm_day =
		#{alarmDay},
		alarm_time = #{alarmTime}
		WHERE sch_no = #{schNo}
	</update>
	<!-- 새 알림 정보 삽입 -->
	<insert id="insertAlarmInfo" parameterType="SchsVO">
		<!-- sa_no에 새로운 값을 설정 -->
		<selectKey keyProperty="saNo" resultType="int"
			order="BEFORE">
			SELECT NVL(MAX(sa_no), 0) + 1 FROM schalarms
		</selectKey>

		INSERT INTO schalarms (
		sa_no,
		sch_no,
		alarm_type,
		alarm_yoil,
		alarm_day,
		alarm_time
		)
		VALUES (
		#{saNo},
		#{schNo},
		#{alarmType},
		#{alarmYoil},
		#{alarmDay},
		#{alarmTime}
		)
	</insert>

	<!-- 알림 정보 삭제 -->
	<delete id="deleteAlarmInfo" parameterType="int">
		DELETE FROM schalarms
		WHERE sch_no = #{schNo}
	</delete>

	<!-- 특정 sch_no의 알림 존재 여부 확인 -->
	<select id="checkAlarm" parameterType="int" resultType="int">
		SELECT
		COUNT(*) FROM schalarms WHERE sch_no = #{schNo}
	</select>












	<!--==============================END 일정관리 ==================================== -->

	<!--==============================개인 캘린더==================================== -->


	<!-- <select id="selectTeamCal" resultType="SchsVO"> SELECT cs.cal_no, c.name 
		|| ' ' || CASE WHEN c.cal_type = 'g1' THEN '(개인)' WHEN c.cal_type = 'g2' 
		THEN '(공유)' ELSE '프로젝트' END AS name FROM calshares cs INNER JOIN cals c ON 
		c.cal_no = cs.cal_no WHERE cs.emp_no = #{empNo} AND c.cal_type = 'g1' ORDER 
		BY CASE WHEN c.cal_type = 'g1' THEN 1 ELSE 9999 END, c.name </select> -->

	<!-- 캘린더 일정 조회 -->
	<select id="selectAllCal" resultType="SchsVO">
		SELECT cs.cal_no,
		c.name ||
		' ' || CASE
		WHEN c.cal_type = 'g1' THEN '(개인)'
		WHEN
		c.cal_type = 'g2'
		THEN '(공유)'
		ELSE '프로젝트' END AS name
		FROM
		calshares cs
		INNER JOIN cals c ON
		c.cal_no = cs.cal_no
		WHERE cs.emp_no =
		#{empNo}
		ORDER BY CASE WHEN c.cal_type = 'g1' THEN 1 ELSE 9999 END, c.name
	</select>

	<!-- 공유캘린더 리스트 -->
	<select id="selectTeamCal" resultType="SchsVO">
		SELECT cs.cal_no,
			c.name ||
			' ' || CASE
			WHEN c.cal_type = 'g1' THEN '(개인)'
			WHEN c.cal_type = 'g2'
			THEN '(공유)'
			ELSE '프로젝트' END AS name
		FROM calshares cs
			INNER JOIN cals c ON c.cal_no = cs.cal_no
		WHERE cs.emp_no = #{empNo}
			AND c.cal_type = 'g2'
		ORDER BY c.name
	</select>


	<!-- 캘린더 등록 -->
	<insert id="insertCalsInfo" parameterType="SchsVO">
		<!-- INSERT 전 calNo를 계산하기 위한 selectKey -->
		<selectKey keyProperty="calNo" resultType="Integer"
			order="BEFORE">
			SELECT GREATEST(NVL(MAX(cal_no), 99) + 1, 100)
			FROM cals
		</selectKey>

		INSERT INTO cals (
		cal_no
		, name
		, cal_type
		, reg_date
		, is_delete
		,
		delete_date
		, color
		)
		VALUES (
		#{calNo}
		, #{name}
		, #{calType}
		, SYSDATE
		,
		#{isDelete}
		, NULL
		, #{color}
		)
	</insert>


	<!-- 캘린더 정보를 calNo로 가져오는 쿼리 -->
	<update id="updateCalsInfo" parameterType="SchsVO">
		UPDATE cals
		SET
		name =
		#{name},
		color = #{color}
		WHERE cal_no = #{calNo}
	</update>


	<!-- 캘린더를 휴지통으로 이동 (isDelete = 'h1'로 업데이트하고 deleteDate 설정) -->
	<update id="updateCalToTrash" parameterType="int">
		UPDATE cals
		SET
		is_delete = 'h1', delete_date = SYSDATE
		WHERE cal_no = #{calNo}
	</update>


	<!-- 캘린더를 복원 (isDelete = 'h2'로 업데이트하고 deleteDate를 NULL로 설정) -->
	<update id="restoreCalFromTrash" parameterType="int">
		UPDATE cals
		SET
		is_delete = 'h2', delete_date = NULL
		WHERE cal_no = #{calNo}
	</update>




	<!-- 휴지통에 있는 캘린더 조회 -->
	<select id="selectToTrash" resultType="CalsVO">
		SELECT *
		FROM cals
		WHERE
		is_delete = 'h1'
	</select>




	<!-- 캘린더 완전 삭제 -->
	<delete id="permanentlyDeleteCal" parameterType="int">
		DELETE FROM cals
		WHERE cal_no = #{calNo} AND is_delete = 'h1'  <!-- 휴지통에 있는 
			캘린더만 삭제 -->
	</delete>
	<!--==============================END 개인 캘린더 ==================================== -->


	<!-- 새로 등록된 사원에 내캘린더 생성 메 -->
	<update id="insertMyCal" statementType="CALLABLE">
		{call insert_my_cal(
			#{empNo, mode=IN, jdbcType=NUMERIC},
			#{result, mode=OUT, jdbcType=NUMERIC}
		)}
	</update>


</mapper>